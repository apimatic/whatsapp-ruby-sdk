# whats_app_cloud_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module WhatsAppCloudApi
  #  whats_app_cloud_api client class.
  class Client
    attr_reader :config

    # Access to business_profiles controller.
    # @return [BusinessProfilesController] Returns the controller instance.
    def business_profiles
      @business_profiles ||= BusinessProfilesController.new config
    end

    # Access to messages controller.
    # @return [MessagesController] Returns the controller instance.
    def messages
      @messages ||= MessagesController.new config
    end

    # Access to media controller.
    # @return [MediaController] Returns the controller instance.
    def media
      @media ||= MediaController.new config
    end

    # Access to phone_numbers controller.
    # @return [PhoneNumbersController] Returns the controller instance.
    def phone_numbers
      @phone_numbers ||= PhoneNumbersController.new config
    end

    # Access to registration controller.
    # @return [RegistrationController] Returns the controller instance.
    def registration
      @registration ||= RegistrationController.new config
    end

    # Access to two_step_verification controller.
    # @return [TwoStepVerificationController] Returns the controller instance.
    def two_step_verification
      @two_step_verification ||= TwoStepVerificationController.new config
    end

    def initialize(connection: nil, adapter: Faraday.default_adapter,
                   timeout: 60, max_retries: 0, retry_interval: 1,
                   backoff_factor: 2,
                   retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                   retry_methods: %i[get put],
                   environment: Environment::PRODUCTION, version: 'v13.0',
                   access_token: '', config: nil)
      @config = if config.nil?
                  Configuration.new(connection: connection, adapter: adapter,
                                    timeout: timeout, max_retries: max_retries,
                                    retry_interval: retry_interval,
                                    backoff_factor: backoff_factor,
                                    retry_statuses: retry_statuses,
                                    retry_methods: retry_methods,
                                    environment: environment, version: version,
                                    access_token: access_token)
                else
                  config
                end
    end
  end
end
