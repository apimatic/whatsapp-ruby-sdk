# whats_app_cloud_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module WhatsAppCloudApi
  # MediaController
  class MediaController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # This endpoint can be used for deleting a media object.
    # @param [String] media_id Required parameter: Media object ID from either
    # uploading media endpoint or media message Webhooks
    # @return [SuccessResponse] response from the API call
    def delete_media(media_id)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/{Media-ID}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'Media-ID' => { 'value' => media_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      SuccessResponse.from_hash(decoded)
    end

    # To retrieve your mediaâ€™s URL, make a request to this endpoint. Later, you
    # can use this URL to download the media file.
    # @param [String] media_id Required parameter: Media object ID from either
    # uploading media endpoint or media message Webhooks
    # @return [RetrieveMediaURLResponse] response from the API call
    def retrieve_media_url(media_id)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/{Media-ID}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'Media-ID' => { 'value' => media_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      RetrieveMediaURLResponse.from_hash(decoded)
    end

    # Used to upload media. All media files sent through this endpoint are
    # encrypted and persist for 30 days.
    # @param [String] phone_number_id Required parameter: Example:
    # @param [String] messaging_product Required parameter: Messaging service
    # used for the request. In this case, use whatsapp.
    # @param [String] file Required parameter: Path to the file stored in your
    # local directory. For example: "@/local/path/file.jpg".
    # @param [String] type Required parameter: Type of media file being
    # uploaded. See Supported Media Types for more information.    Supported
    # options for images are: `image/jpeg`, `image/png`    Supported options for
    # documents are: `text/plain`, `application/pdf`,
    # `application/vnd.ms-powerpoint`, `application/msword`,
    # `application/vnd.ms-excel`,
    # `application/vnd.openxmlformats-officedocument.wordprocessingml.document`,
    # `application/vnd.openxmlformats-officedocument.presentationml.presentation
    # `, `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet` 
    # Supported options for audio are: `audio/aac`, `audio/mp4`, `audio/mpeg`,
    # `audio/amr`, `audio/ogg`, `audio/opus`  Supported options for video are:
    # `video/mp4`, `video/3gp`  Supported options for stickers are:
    # `image/webp`
    # @return [UploadMedia] response from the API call
    def upload_media(phone_number_id,
                     messaging_product,
                     file,
                     type)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/{Phone-Number-ID}/media'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'Phone-Number-ID' => { 'value' => phone_number_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare form parameters.
      _parameters = {
        'messaging_product' => messaging_product,
        'file' => file,
        'type' => type
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      UploadMedia.from_hash(decoded)
    end
  end
end
