# whats_app_cloud_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module WhatsAppCloudApi
  # Message Model.
  class Message < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A media object containing audio. Required when type=audio.
    # @return [Audio]
    attr_accessor :audio

    # A contact object. Required when type=contacts.
    # @return [List of Contact]
    attr_accessor :contacts

    # A media object containing a document. Required when type=document.
    # @return [Document]
    attr_accessor :document

    # A media object containing an image. Required when type=image.
    # @return [Image]
    attr_accessor :image

    # This option is used to send List Messages and Reply Buttons. The
    # components of each interactive object generally follow a consistent
    # pattern: header, body, footer, and action. Required when type=interactive.
    # @return [Interactive]
    attr_accessor :interactive

    # A location object. Required when type=location.
    # @return [Location]
    attr_accessor :location

    # Messaging service used for the request.
    # @return [String]
    attr_accessor :messaging_product

    # Currently, you can only send messages to individuals.
    # @return [String]
    attr_accessor :recipient_type

    # A media object containing a sticker. Currently, we support inbound both
    # and outbound stickers: For outbound, we only support static third-party
    # stickers. For inbound, we support all types of stickers. The sticker needs
    # to be 512x512 pixels and the fileâ€™s size needs to be less than 100 KB.
    # Required when type=sticker.
    # @return [Sticker]
    attr_accessor :sticker

    # A template object. Required when type=template.
    # @return [Template]
    attr_accessor :template

    # Required for text messages.
    # @return [Text]
    attr_accessor :text

    # WhatsApp ID or phone number for the person you want to send a message to.
    # @return [String]
    attr_accessor :to

    # The type of message you want to send.
    # @return [MessageTypeEnum]
    attr_accessor :type

    # A media object containing a video. Required when type=video.
    # @return [Video]
    attr_accessor :video

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['audio'] = 'audio'
      @_hash['contacts'] = 'contacts'
      @_hash['document'] = 'document'
      @_hash['image'] = 'image'
      @_hash['interactive'] = 'interactive'
      @_hash['location'] = 'location'
      @_hash['messaging_product'] = 'messaging_product'
      @_hash['recipient_type'] = 'recipient_type'
      @_hash['sticker'] = 'sticker'
      @_hash['template'] = 'template'
      @_hash['text'] = 'text'
      @_hash['to'] = 'to'
      @_hash['type'] = 'type'
      @_hash['video'] = 'video'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        audio
        contacts
        document
        image
        interactive
        location
        recipient_type
        sticker
        template
        text
        type
        video
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(messaging_product = nil,
                   to = nil,
                   audio = nil,
                   contacts = nil,
                   document = nil,
                   image = nil,
                   interactive = nil,
                   location = nil,
                   recipient_type = 'individual',
                   sticker = nil,
                   template = nil,
                   text = nil,
                   type = nil,
                   video = nil)
      @audio = audio unless audio == SKIP
      @contacts = contacts unless contacts == SKIP
      @document = document unless document == SKIP
      @image = image unless image == SKIP
      @interactive = interactive unless interactive == SKIP
      @location = location unless location == SKIP
      @messaging_product = messaging_product unless messaging_product == SKIP
      @recipient_type = recipient_type unless recipient_type == SKIP
      @sticker = sticker unless sticker == SKIP
      @template = template unless template == SKIP
      @text = text unless text == SKIP
      @to = to unless to == SKIP
      @type = type unless type == SKIP
      @video = video unless video == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      messaging_product =
        hash.key?('messaging_product') ? hash['messaging_product'] : SKIP
      to = hash.key?('to') ? hash['to'] : SKIP
      audio = Audio.from_hash(hash['audio']) if hash['audio']
      # Parameter is an array, so we need to iterate through it
      contacts = nil
      unless hash['contacts'].nil?
        contacts = []
        hash['contacts'].each do |structure|
          contacts << (Contact.from_hash(structure) if structure)
        end
      end

      contacts = SKIP unless hash.key?('contacts')
      document = Document.from_hash(hash['document']) if hash['document']
      image = Image.from_hash(hash['image']) if hash['image']
      interactive = Interactive.from_hash(hash['interactive']) if hash['interactive']
      location = Location.from_hash(hash['location']) if hash['location']
      recipient_type = hash['recipient_type'] ||= 'individual'
      sticker = Sticker.from_hash(hash['sticker']) if hash['sticker']
      template = Template.from_hash(hash['template']) if hash['template']
      text = Text.from_hash(hash['text']) if hash['text']
      type = hash.key?('type') ? hash['type'] : SKIP
      video = Video.from_hash(hash['video']) if hash['video']

      # Create object from extracted values.
      Message.new(messaging_product,
                  to,
                  audio,
                  contacts,
                  document,
                  image,
                  interactive,
                  location,
                  recipient_type,
                  sticker,
                  template,
                  text,
                  type,
                  video)
    end
  end
end
