# whats_app_cloud_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module WhatsAppCloudApi
  # DateTimeObject Model.
  class DateTimeObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Default text. For Cloud API, we always use the fallback value, and we do
    # not attempt to localize using other optional fields.
    # @return [String]
    attr_accessor :fallback_value

    # Default text. For Cloud API, we always use the fallback value, and we do
    # not attempt to localize using other optional fields.
    # @return [Integer]
    attr_accessor :day_of_week

    # Default text. For Cloud API, we always use the fallback value, and we do
    # not attempt to localize using other optional fields.
    # @return [Integer]
    attr_accessor :year

    # Default text. For Cloud API, we always use the fallback value, and we do
    # not attempt to localize using other optional fields.
    # @return [Integer]
    attr_accessor :month

    # Default text. For Cloud API, we always use the fallback value, and we do
    # not attempt to localize using other optional fields.
    # @return [Integer]
    attr_accessor :day_of_month

    # Default text. For Cloud API, we always use the fallback value, and we do
    # not attempt to localize using other optional fields.
    # @return [Integer]
    attr_accessor :hour

    # Default text. For Cloud API, we always use the fallback value, and we do
    # not attempt to localize using other optional fields.
    # @return [Integer]
    attr_accessor :minute

    # Default text. For Cloud API, we always use the fallback value, and we do
    # not attempt to localize using other optional fields.
    # @return [String]
    attr_accessor :calendar

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['fallback_value'] = 'fallback_value'
      @_hash['day_of_week'] = 'day_of_week'
      @_hash['year'] = 'year'
      @_hash['month'] = 'month'
      @_hash['day_of_month'] = 'day_of_month'
      @_hash['hour'] = 'hour'
      @_hash['minute'] = 'minute'
      @_hash['calendar'] = 'calendar'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        day_of_week
        year
        month
        day_of_month
        hour
        minute
        calendar
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(fallback_value = nil,
                   day_of_week = nil,
                   year = nil,
                   month = nil,
                   day_of_month = nil,
                   hour = nil,
                   minute = nil,
                   calendar = nil)
      @fallback_value = fallback_value unless fallback_value == SKIP
      @day_of_week = day_of_week unless day_of_week == SKIP
      @year = year unless year == SKIP
      @month = month unless month == SKIP
      @day_of_month = day_of_month unless day_of_month == SKIP
      @hour = hour unless hour == SKIP
      @minute = minute unless minute == SKIP
      @calendar = calendar unless calendar == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      fallback_value =
        hash.key?('fallback_value') ? hash['fallback_value'] : SKIP
      day_of_week = hash.key?('day_of_week') ? hash['day_of_week'] : SKIP
      year = hash.key?('year') ? hash['year'] : SKIP
      month = hash.key?('month') ? hash['month'] : SKIP
      day_of_month = hash.key?('day_of_month') ? hash['day_of_month'] : SKIP
      hour = hash.key?('hour') ? hash['hour'] : SKIP
      minute = hash.key?('minute') ? hash['minute'] : SKIP
      calendar = hash.key?('calendar') ? hash['calendar'] : SKIP

      # Create object from extracted values.
      DateTimeObject.new(fallback_value,
                         day_of_week,
                         year,
                         month,
                         day_of_month,
                         hour,
                         minute,
                         calendar)
    end
  end
end
