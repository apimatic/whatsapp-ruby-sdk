# whats_app_cloud_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module WhatsAppCloudApi
  # SendMessageResponse Model.
  class SendMessageResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :messaging_product

    # TODO: Write general description for this method
    # @return [List of ResponseContact]
    attr_accessor :contacts

    # TODO: Write general description for this method
    # @return [List of ResponseMessage]
    attr_accessor :messages

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['messaging_product'] = 'messaging_product'
      @_hash['contacts'] = 'contacts'
      @_hash['messages'] = 'messages'
      @_hash
    end

    # An array for optional fields
    def optionals
      []
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(messaging_product = nil,
                   contacts = nil,
                   messages = nil)
      @messaging_product = messaging_product unless messaging_product == SKIP
      @contacts = contacts unless contacts == SKIP
      @messages = messages unless messages == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      messaging_product =
        hash.key?('messaging_product') ? hash['messaging_product'] : SKIP
      # Parameter is an array, so we need to iterate through it
      contacts = nil
      unless hash['contacts'].nil?
        contacts = []
        hash['contacts'].each do |structure|
          contacts << (ResponseContact.from_hash(structure) if structure)
        end
      end

      contacts = SKIP unless hash.key?('contacts')
      # Parameter is an array, so we need to iterate through it
      messages = nil
      unless hash['messages'].nil?
        messages = []
        hash['messages'].each do |structure|
          messages << (ResponseMessage.from_hash(structure) if structure)
        end
      end

      messages = SKIP unless hash.key?('messages')

      # Create object from extracted values.
      SendMessageResponse.new(messaging_product,
                              contacts,
                              messages)
    end
  end
end
